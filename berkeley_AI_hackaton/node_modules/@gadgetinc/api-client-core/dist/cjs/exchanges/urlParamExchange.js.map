{"version":3,"file":"urlParamExchange.js","sourceRoot":"","sources":["../../../src/exchanges/urlParamExchange.ts"],"names":[],"mappings":";;;AACA,qCAAyC;AAE5B,QAAA,gBAAgB,GAAa,IAAA,kBAAW,EAAC;IACpD,WAAW,EAAE,CAAC,SAAS,EAAE,EAAE;QACzB,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;YAC7D,IAAI,CAAC;gBACH,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzD,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;gBAC9C,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC5D,SAAS,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,KAAK,IAAI,SAAS,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC7D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,2HAA2H;YAC7H,CAAC;QACH,CAAC;IACH,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { Exchange } from \"@urql/core\";\nimport { mapExchange } from \"@urql/core\";\n\nexport const urlParamExchange: Exchange = mapExchange({\n  onOperation: (operation) => {\n    if (operation.context.url && operation.context.operationName) {\n      try {\n        const [start, params] = operation.context.url.split(\"?\");\n        const paramsObj = new URLSearchParams(params);\n        paramsObj.set(\"operation\", operation.context.operationName);\n        operation.context.url = `${start}?${paramsObj.toString()}`;\n      } catch (error) {\n        // not able to parse URL params, just don't add this optional param and let the rest of the system react to the invalid URL\n      }\n    }\n  },\n});\n"]}